
exports.GoogleCalendarParse = GoogleCalendarParse;

var util   = require('util');
var querystring = require('querystring');

var OAuth = require('google-oauth');
var rest = require('restler');
var https = require('https');


function GoogleCalendarParse(parse_app, consumer_key, consumer_secret, callback_url){
  this.parse_app = parse_app
  this.key = consumer_key;
  this.secret = consumer_secret;
  this.cached_tokens = new Array();
  this.oauth = new OAuth.OAuth2(
    consumer_key, 
    consumer_secret,
    callback_url);
}

GoogleCalendarParse.prototype.refreshAccessToken = function(userId, callback) {
	var T = this;
	this.parse_app.find('User', userId, function(err, response) {
		if (!response) {
			callback(null);
			return;
		}
		var refresh_token = response.google_refresh_token;
		console.log("Using refresh token: ", refresh_token);

		var request_data = {
					refresh_token: refresh_token,
					client_id: T.key,
					client_secret: T.secret,
					grant_type: 'refresh_token'
		}

		var options = {
            parser: rest.parsers.json,
            data: request_data,
            headers: {'Content_Type': 'application/x-www-form-urlencoded'}
		}

        restRequest = rest.post("https://accounts.google.com/o/oauth2/token", options);

		restRequest.on('complete', function(result, response) {
            console.log("Completed request with refresh token, got result", result);
            if(response instanceof Error || response.statusCode != 200) {
                console.log("Got an error when using refresh token", result, response);
                return callback(result, null);
            } else {
                var new_access_token = result.access_token;
                console.log("Got new access using refresh token", new_access_token);
                T.parse_app.updateUser(userId, {google_access_token: new_access_token}, function(err, response){
                    console.log("Updated access token in parse", err, response)
                });
                callback(result, new_access_token);
            }
        });
	});
}


GoogleCalendarParse.prototype.getGoogleAuthorizeTokenURL = function(callback) {
	return this.oauth.getGoogleAuthorizeTokenURL(['https://www.googleapis.com/auth/calendar'], callback)
}

GoogleCalendarParse.prototype.retrieveAccessToken = function(userId, done) {
    if (userId in this.cached_tokens) {
        done(false, cached_tokens[userId]);
    } else {
        console.log("Searching parse for access token for user", userId);
        this.parse_app.find('User', userId, function (err, response) {
            var access_token;
            if(response && response.google_access_token) {
                console.log("Using Parse auth token ", response.google_access_token);
                access_token = response.google_access_token;
                done(false, access_token);
            } else {
                console.log("Couldn't find access token");
                done(true, null);
            }
        });
    }
}

GoogleCalendarParse.prototype.generateRequest = function(type, hostname, path, access_token, key, option, body, callback) {
    option.access_token = access_token;
    option.key = key;

    var restRequest = null;
    var requestOption = { query:option, parser:rest.parsers.json };
    if(body){
        requestOption.data = body;
        requestOption.headers = {};
        requestOption.headers['content-type'] = 'application/json';
    }  

    var url = hostname + path;

    switch(type.toLowerCase()){
        case 'del':
        case 'delete': 
            restRequest = rest.del(url, requestOption);
          break;
          
        case 'put': restRequest = rest.put(url, requestOption);
          break;
        
        case 'post': restRequest = rest.post(url, requestOption);
          break;
        
        default : restRequest = rest.get(url, requestOption);
    }

    return restRequest;
}

GoogleCalendarParse.prototype.sendRequest = function(type, hostname, path, user_id, option, body, callback) {
    var T = this;
    if((callback === null || callback === undefined) && body !== null) {
        callback = body;
        body = null;
    }

    if((callback === null || callback === undefined) && option !== null) {
        callback = option;
        option = null;
    }

    if(body && typeof body == 'object'){
        body = JSON.stringify(body)
    } 
    
    callback = callback || function(){};
    
    option = option || {};

    this.retrieveAccessToken(user_id, function(err, access_token) {
        var restRequest = T.generateRequest(type, hostname, path, access_token, T.key, option, body, callback);

        restRequest.on('complete', function(result, response ) {
            console.log("Completed rest request to ", restRequest.url);
            if(result instanceof Error || response.statusCode != 200){
                console.log("Got error: ", result);
                return T.refreshAccessToken(user_id, function(result, access_token) {
                    console.log("Tried to get new access token using refresh:", access_token);
                    if(!access_token) {
                        return callback(result, result);
                    }
                    var newRestRequest = T.generateRequest(type, hostname, path, access_token, T.key, option, body, callback);
                    console.log("here", newRestRequest);
        
                    return newRestRequest.on('complete', function(result, response) {
                        console.log("Tried to use refresh token, got back:", result);
                        return callback(null, result);
                    });
                });
            }
            
            console.log("Done! Calling back now");
            return callback(null, result);
        });

    });

  
}

// Calendar List

GoogleCalendarParse.prototype.listCalendarList = function(user_id, option, callback) {
  console.log("listCalendarList");
  return this.sendRequest('get','https://www.googleapis.com', '/calendar/v3/users/me/calendarList', user_id, option, callback)
} 

GoogleCalendarParse.prototype.getCalendarList = function(user_id, calendarId, callback) {
  console.log("getCalendarList");
  return this.sendRequest('get','https://www.googleapis.com', '/calendar/v3/users/me/calendarList/'+calendarId, user_id, option, callback)
}

// Events

GoogleCalendarParse.prototype.listEvent = function(user_id, calendarId, option, callback) {
  //console.log("In GoogleCalendar, trying to listEvent");
  return this.sendRequest('get', 'https://www.googleapis.com', '/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events', 
    user_id, option, callback);
}

GoogleCalendarParse.prototype.insertEvent = function(user_id, calendarId, event, option, callback) {
  
  if(arguments.length < 5){
    callback = option;
    option = {};
  }
  
  return this.sendRequest('post', 'https://www.googleapis.com', '/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events', 
    user_id, option, event, callback);
}

GoogleCalendarParse.prototype.getEvent = function(user_id, calendarId, eventId, option, callback) {
  
  return this.sendRequest('get', 'https://www.googleapis.com', '/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events/'+eventId, 
    user_id, option, callback);
}

GoogleCalendarParse.prototype.deleteEvent = function(user_id, calendarId, eventId, option, callback) {
  
  return this.sendRequest('delete', 'https://www.googleapis.com', '/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events/'+eventId, 
    user_id, option, callback);
}

GoogleCalendarParse.prototype.updateEvent = function(user_id, calendarId, eventId, event, option, callback) {
  
  return this.sendRequest('put', 'https://www.googleapis.com', '/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events/'+eventId, 
    user_id, option, event, callback);
}


