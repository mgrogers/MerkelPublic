
exports.GoogleCalendarParse = GoogleCalendarParse;

var util   = require('util');
var querystring = require('querystring');

var OAuth = require('google-oauth');
var rest = require('restler');

function GoogleCalendarParse(parse_app, consumer_key, consumer_secret, callback_url){
  this.parse_app = parse_app
  this.key = consumer_key;
  this.oauth = new OAuth.OAuth2(
    consumer_key, 
    consumer_secret,
    callback_url);
}

GoogleCalendarParse.prototype.refreshAccessToken = function(userId, callback) {
	var T = this;
	this.parse_app.find('User', userId, function(err, response) {
		if (!response) {
			callback(null);
			return;
		}
		var refresh_token = response.google_refresh_token;
		console.log("Using refresh token: ", refresh_token);
		var request_data = querystring.stringify({
					refresh_token: refresh_token,
					client_id: T.google_consumer_key,
					client_secret: T.google_consumer_secret,
					grant_type: 'refresh_token'
		});

		var options = {
			hostname: 'accounts.google.com',
			path: '/o/oauth2/token',
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
				'Content-Length': request_data.length
			}
		}

		var request = https.request(options, function(res) {
			console.log("GoogleParseAuth - statusCode: ", res.statusCode);
			console.log("GoogleParseAuth - headers: ", res.headers);
			res.setEncoding('utf8');
			res.on('data', function(data) {
				console.log("Got data response for refreshing token");
				data = JSON.parse(data);
				var new_access_token = data.access_token;
				T.parse_app.update('User', userId, {google_access_token: new_access_token}, function(err, response){});
				console.log("GoogleParseAuth - received new access token: " + new_access_token);
				callback(new_access_token);
			});
		});
		request.write(request_data);
		request.end();

		request.on('error', function(e) {
			console.error(e);
			callback(false);
		});
	});
}


GoogleCalendar.prototype.getGoogleAuthorizeTokenURL = function(callback) {
	return this.oauth.getGoogleAuthorizeTokenURL(['https://www.googleapis.com/auth/calendar'], callback)
}

GoogleCalendarParse.prototype.getGoogleAccessToken = function(params, callback) {
	return this.oauth.getGoogleAccessToken(params, callback)
}

GoogleCalendarParse.prototype.sendRequest = function(type, url, access_token, option, body, callback) {

  if((callback === null || callback === undefined) && body !== null) {
    callback = body;
    body = null;
  }

  if((callback === null || callback === undefined) && option !== null) {
    callback = option;
    option = null;
  }

  if(body && typeof body == 'object'){
    body = JSON.stringify(body)
  } 
  
  callback = callback || function(){};
  option = option || {};
  option.access_token = access_token;
  option.key = this.key;
  
  var restRequest = null;
  var requestOption = { query:option, parser:rest.parsers.json };
  if(body){
    requestOption.data = body;
    requestOption.headers = {};
    requestOption.headers['content-type'] = 'application/json';
  }  
  
  switch(type.toLowerCase()){
    
    case 'del':
    case 'delete': 
        restRequest = rest.del(url, requestOption);
      break;
      
    case 'put': restRequest = rest.put(url, requestOption);
      break;
    
    case 'post': restRequest = rest.post(url, requestOption);
      break;
    
    default : restRequest = rest.get(url, requestOption);
  }
  

  restRequest.on('complete', function(result, response ) {
    console.log("Completed rest request to ", url);
    if(result instanceof Error || response.statusCode != 200){  
      return callback(result, response.rawEncoded);
    }
    
    return callback(null, result);
  })
}

// Calendar List

GoogleCalendarParse.prototype.listCalendarList = function(access_token, option, callback) {
  console.log("listCalendarList");
  return this.sendRequest('get','https://www.googleapis.com/calendar/v3/users/me/calendarList', access_token, option, callback)
} 

GoogleCalendarParse.prototype.getCalendarList = function(access_token, calendarId, callback) {
  console.log("getCalendarList");
  return this.sendRequest('get','https://www.googleapis.com/calendar/v3/users/me/calendarList/'+calendarId, access_token, option, callback)
}

// Events

GoogleCalendarParse.prototype.listEvent = function(access_token, calendarId, option, callback) {
  console.log("In GoogleCalendar, trying to listEvent");
  return this.sendRequest('get', 'https://www.googleapis.com/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events', 
    access_token, option, callback);
}

GoogleCalendarParse.prototype.insertEvent = function(access_token, calendarId, event, option, callback) {
  
  if(arguments.length < 5){
    callback = option;
    option = {};
  }
  
  return this.sendRequest('post', 'https://www.googleapis.com/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events', 
    access_token, option, event, callback);
}

GoogleCalendarParse.prototype.getEvent = function(access_token, calendarId, eventId, option, callback) {
  
  return this.sendRequest('get', 'https://www.googleapis.com/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events/'+eventId, 
    access_token, option, callback);
}

GoogleCalendarParse.prototype.deleteEvent = function(access_token, calendarId, eventId, option, callback) {
  
  return this.sendRequest('delete', 'https://www.googleapis.com/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events/'+eventId, 
    access_token, option, callback);
}

GoogleCalendarParse.prototype.updateEvent = function(access_token, calendarId, eventId, event, option, callback) {
  
  return this.sendRequest('put', 'https://www.googleapis.com/calendar/v3/calendars/'+encodeURIComponent(calendarId)+'/events/'+eventId, 
    access_token, option, event, callback);
}


