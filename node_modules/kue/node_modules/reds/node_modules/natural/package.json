{
  "name": "natural",
  "description": "General natural language (stemming, classification, inflection, phonetics) facilities for node.",
  "version": "0.0.27",
  "engines": {
    "node": ">=0.2.6"
  },
  "devDependencies": {
    "uubench": "0.0.x"
  },
  "author": {
    "name": "Chris Umbel",
    "email": "chris@chrisumbel.com"
  },
  "keywords": [
    "natural",
    "language",
    "porter",
    "lancaster",
    "stemmer",
    "bayes",
    "classifier",
    "phonetic",
    "metaphone",
    "inflector"
  ],
  "main": "./lib/natural/index.js",
  "readme": "natural\n=======\n\n\"Natural\" is a general natural language facility for nodejs. Stemming,\nclassification, phonetics and some inflection are currently supported.\n\nIt's still in the VERY (and I mean VERY) early stages, and I'm VERY (yes, again,\nVERY) interested in bug reports, contributions and the like.\n\nAt the moment most algorithms are English-specific but long-term some diversity\nis in order.\n\nAside from this README the only current documentation is [here on my blog](http://www.chrisumbel.com/article/node_js_natural_language_porter_stemmer_lancaster_bayes_naive_metaphone_soundex).\n\nInstallation\n------------\n\nIf you're just looking to consume natural without your own node application\nplease install the NPM\n\n    npm install natural\n    \nIf you're interested in contributing to natural or just hacking it then by all\nmeans fork away!\n    \nStemmers\n--------\n\nCurrently stemming is supported via the Porter and Lancaster (Paice/Husk)\nalgorithms.\n\n    var natural = require('natural');\n    \nthis example uses a porter stemmer. \"word\" is returned.\n\n    console.log(natural.PorterStemmer.stem(\"words\")); // stem a single word\n    \nattach() patches stem() and tokenizeAndStem() to String as a shortcut to\nPorterStemmer.stem(token). tokenizeAndStem() breaks text up into single words\nand returns an array of stemmed tokens.\n\n    natural.PorterStemmer.attach();\n    console.log(\"i am waking up to the sounds of chainsaws\".tokenizeAndStem());\n    console.log(\"chainsaws\".stem());\n\nthe same thing can be done with a lancaster stemmer\n\n    natural.LancasterStemmer.attach();\n    console.log(\"i am waking up to the sounds of chainsaws\".tokenizeAndStem());\n    console.log(\"chainsaws\".stem());\n\nNaive Bayes Classifier\n----------------------\n\n    var natural = require('natural'), \n    \tclassifier = new natural.BayesClassifier();\n\nyou can train the classifier on sample text. it will use reasonable defaults to\ntokenize and stem the text.\n\n    classifier.train([{classification: 'buy', text: \"i am long qqqq\"},\n                  {classification: 'buy', text: \"buy the q's\"},\n                  {classification: 'sell', text: \"short gold\"},\n                  {classification: 'sell', text: \"sell gold\"}\n    ]);\n\noutputs \"sell\"\n\n    console.log(classifier.classify('i am short silver'));\n\noutputs \"buy\"\n\n    console.log(classifier.classify('i am long copper'));\n\n    classifier = new natural.BayesClassifier();\n\nthe classifier can also be trained on and classify arrays of tokens, strings, or\nany mixture. arrays let you use entirely custom data with  your own\ntokenization/stemming if any at all.\n\n    classifier.train([{classification: 'hockey', text: ['puck', 'shoot']},\n                  {classification: 'hockey', text: 'goalies stop pucks.'},\n                  {classification: 'stocks', text: ['stop', 'loss']},\n                  {classification: 'stocks', text: 'creat a stop order'}\n                  ]);\n\n    console.log(classifier.classify('stop out at $100'));\n    console.log(classifier.classify('stop the puck, fool!'));\n    \n    console.log(classifier.classify(['stop', 'out']));\n    console.log(classifier.classify(['stop', 'puck', 'fool']));\n\nA classifier can also be persisted and recalled so you can reuse a training.\n\n    var classifier = new natural.BayesClassifier();\n    \n    classifier.train([{classification: 'buy', text: ['long', 'qqqq']},\n                  {classification: 'buy', text: \"buy the q's\"},\n                  {classification: 'sell', text: \"short gold\"},\n                  {classification: 'sell', text: ['sell', 'gold']}\n    ]);\n        \npersist to a file on disk named \"classifier.json\"\n\n    classifier.save('classifier.json', function(err, classifier) {\n        // the classifier is saved to the classifier.json file!\n    });\n    \nand to recall from the classifier.json saved above:\n\n    natural.BayesClassifier.load('classifier.json', function(err, classifier) {\n        console.log(classifier.classify('long SUNW'));\n        console.log(classifier.classify('short SUNW'));\n    });\n\nA classifier can also be serialized and deserialized as such\n\n    var classifier = new natural.BayesClassifier();\n\n    classifier.train([{classification: 'buy', text: ['long', 'qqqq']},\n        {classification: 'buy', text: \"buy the q's\"},\n        {classification: 'sell', text: \"short gold\"},\n        {classification: 'sell', text: ['sell', 'gold']}\n    ]);\n\n    // serialize\n    var raw = JSON.stringify(classifier);\n    // deserialize\n    var restoredClassifier = natural.BayesClassifier.restore(raw);\n    console.log(restoredClassifier.classify('i am short silver'));\n    console.log(restoredClassifier.classify('i am long silver'));\n\nPhonetics\n---------\n\nPhonetic matching (sounds-like) matching can be done with either the SoundEx or\nMetaphone algorithms\n\n    var natural = require('natural'),\n        metaphone = natural.Metaphone, soundEx = natural.SoundEx;\n\n    var wordA = 'phonetics';\n    var wordB = 'fonetix';\n\ntest the two words to see if they sound alike\n\n    if(metaphone.compare(wordA, wordB))\n        console.log('they sound alike!');\n        \nthe raw phonetics are obtained with process()\n\n    console.log(metaphone.process('phonetics'));\n\nattaching will patch String with useful methods\n\n    metaphone.attach();\n\nsoundsLike is essentially a shortcut to Metaphone.compare\n\n    if(wordA.soundsLike(wordB))\n        console.log('they sound alike!');\n        \nthe raw phonetics are obtained with phonetics()\n\n    console.log('phonetics'.phonetics());   \n\nfull text strings can be tokenized into arrays of phonetics similar to stemmers\n\n    console.log('phonetics rock'.tokenizeAndPhoneticize());\n\nsame module operations apply with SoundEx\n\n    if(soundEx.compare(wordA, wordB))\n        console.log('they sound alike!');\n\n    console.log(soundEx.process('phonetics'));\n\nthe same String patches apply with soundex\n\n    soundEx.attach();\n\n    if(wordA.soundsLike(wordB))\n        console.log('they sound alike!');\n        \n    console.log('phonetics'.phonetics());\n    \n    \nInflectors\n----------\n\nNouns can be pluralized/singularized and numbers counted with inflectors\n\n    var natural = require('natural'),\n    nounInflector = new natural.NounInflector;\n    \nto pluralize a word (outputs \"radii\")\n\n    console.log(nounInflector.pluralize('radius'));\n\nto singularize a word (outputs \"beer\")\n\n    console.log(nounInflector.singularize('beers'));\n\nlike many of the other features String can be patched to perform the operations\ndirectly. the \"Noun\" suffix to the methods is necessary as verbs will be\nsupported in the future.\n\n    nounInflector.attach();\n    console.log('radius'.pluralizeNoun());\n    console.log('beers'.singularizeNoun());   \n\ncounters can also be produced from integers with CountInflector\n    \n    countInflector = natural.CountInflector;\n\noutputs \"1st\"\n\n    console.log(countInflector.nth(1));\n\noutputs \"111th\"\n\n    console.log(countInflector.nth(111));\n\n\nLicense\n-------\n\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "natural@0.0.27",
  "_from": "natural@0.0.27"
}
